
scheduler_display_keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000984  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800078  00800078  00000a30  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00001188  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f5  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ac  00000000  00000000  00001b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056e  00000000  00000000  00001e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000021b  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000352  00000000  00000000  0000273f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002a91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3b       	cpi	r26, 0xB8	; 184
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 75 00 	call	0xea	; 0xea <main>
  8a:	0c 94 c0 04 	jmp	0x980	; 0x980 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_10>:
volatile int key_number = 12; //0..16, 0==nothing
volatile int key_ready = 1; //t/f



ISR(TIMER0_COMP_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	// every millisecond do:
	schedule(); // schedule new tasks
  bc:	0e 94 11 03 	call	0x622	; 0x622 <schedule>
	multiplexer(); // change active display
  c0:	0e 94 ad 01 	call	0x35a	; 0x35a <multiplexer>
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
  cc:	bf 91       	pop	r27
  ce:	af 91       	pop	r26
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	7f 91       	pop	r23
  d6:	6f 91       	pop	r22
  d8:	5f 91       	pop	r21
  da:	4f 91       	pop	r20
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <main>:


int main(void)
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
	DISPLAY_POWER_CONTROL_MODE = 0b11111111;
  f2:	87 e3       	ldi	r24, 0x37	; 55
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
	DISPLAY_STATE_MODE = 0b11111111;
  fc:	8a e3       	ldi	r24, 0x3A	; 58
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
	DISPLAY_POWER_CONTROL = 0b11111111;
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
	DISPLAY_STATE = DISPLAY_OFF;
 110:	8b e3       	ldi	r24, 0x3B	; 59
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
	setupTimer();
 11a:	0e 94 08 02 	call	0x410	; 0x410 <setupTimer>
//	addTask(0, 100, time_inc, (void*)0); // OK
//	addTask(0, 5, time_inc, (void*)0); // for testing purposes (on simulator)
//	addTask(1, 1, multiplexer, (void*)0); //bad idea
	addTask(0, 50, check_keyboard, (void*)0);
 11e:	28 ea       	ldi	r18, 0xA8	; 168
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	62 e3       	ldi	r22, 0x32	; 50
 126:	a9 01       	movw	r20, r18
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <addTask>
	addTask(1, 50, draw_digit, (void*)0);
 130:	27 e7       	ldi	r18, 0x77	; 119
 132:	31 e0       	ldi	r19, 0x01	; 1
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	62 e3       	ldi	r22, 0x32	; 50
 138:	a9 01       	movw	r20, r18
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <addTask>
	execute();
 142:	0e 94 da 03 	call	0x7b4	; 0x7b4 <execute>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <check_keyboard>:


void check_keyboard() {
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	2e 97       	sbiw	r28, 0x0e	; 14
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
	int column = 0;
 164:	1a 82       	std	Y+2, r1	; 0x02
 166:	19 82       	std	Y+1, r1	; 0x01
	int row = 0;
 168:	1c 82       	std	Y+4, r1	; 0x04
 16a:	1b 82       	std	Y+3, r1	; 0x03
	
	KEYBOARD_PORT = 0x00;
 16c:	85 e3       	ldi	r24, 0x35	; 53
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	fc 01       	movw	r30, r24
 172:	10 82       	st	Z, r1
	KEYBOARD_MODE = 0x0F;
 174:	84 e3       	ldi	r24, 0x34	; 52
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	2f e0       	ldi	r18, 0x0F	; 15
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
	KEYBOARD_PORT = 0xF0;
 17e:	85 e3       	ldi	r24, 0x35	; 53
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	20 ef       	ldi	r18, 0xF0	; 240
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
	for(int i=0;i<20;i++);
 188:	1e 82       	std	Y+6, r1	; 0x06
 18a:	1d 82       	std	Y+5, r1	; 0x05
 18c:	05 c0       	rjmp	.+10     	; 0x198 <check_keyboard+0x48>
 18e:	8d 81       	ldd	r24, Y+5	; 0x05
 190:	9e 81       	ldd	r25, Y+6	; 0x06
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	9e 83       	std	Y+6, r25	; 0x06
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	8d 81       	ldd	r24, Y+5	; 0x05
 19a:	9e 81       	ldd	r25, Y+6	; 0x06
 19c:	84 31       	cpi	r24, 0x14	; 20
 19e:	91 05       	cpc	r25, r1
 1a0:	b4 f3       	brlt	.-20     	; 0x18e <check_keyboard+0x3e>
	row = KEYBOARD_PIN / 16;
 1a2:	83 e3       	ldi	r24, 0x33	; 51
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	fc 01       	movw	r30, r24
 1a8:	80 81       	ld	r24, Z
 1aa:	82 95       	swap	r24
 1ac:	8f 70       	andi	r24, 0x0F	; 15
 1ae:	88 2f       	mov	r24, r24
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	9c 83       	std	Y+4, r25	; 0x04
 1b4:	8b 83       	std	Y+3, r24	; 0x03
	
	KEYBOARD_PORT = 0x00;
 1b6:	85 e3       	ldi	r24, 0x35	; 53
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	10 82       	st	Z, r1
	KEYBOARD_MODE = 0xF0;
 1be:	84 e3       	ldi	r24, 0x34	; 52
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	20 ef       	ldi	r18, 0xF0	; 240
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
	KEYBOARD_PORT = 0x0F;
 1c8:	85 e3       	ldi	r24, 0x35	; 53
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	2f e0       	ldi	r18, 0x0F	; 15
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 83       	st	Z, r18
	for(int i=0;i<20;i++);
 1d2:	18 86       	std	Y+8, r1	; 0x08
 1d4:	1f 82       	std	Y+7, r1	; 0x07
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <check_keyboard+0x92>
 1d8:	8f 81       	ldd	r24, Y+7	; 0x07
 1da:	98 85       	ldd	r25, Y+8	; 0x08
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	98 87       	std	Y+8, r25	; 0x08
 1e0:	8f 83       	std	Y+7, r24	; 0x07
 1e2:	8f 81       	ldd	r24, Y+7	; 0x07
 1e4:	98 85       	ldd	r25, Y+8	; 0x08
 1e6:	84 31       	cpi	r24, 0x14	; 20
 1e8:	91 05       	cpc	r25, r1
 1ea:	b4 f3       	brlt	.-20     	; 0x1d8 <check_keyboard+0x88>
	column = KEYBOARD_PIN;
 1ec:	83 e3       	ldi	r24, 0x33	; 51
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	88 2f       	mov	r24, r24
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	9a 83       	std	Y+2, r25	; 0x02
 1fa:	89 83       	std	Y+1, r24	; 0x01
	
	int row_counter=0;
 1fc:	1a 86       	std	Y+10, r1	; 0x0a
 1fe:	19 86       	std	Y+9, r1	; 0x09
	while((row % 2) == 1 && row_counter<4) {
 200:	0e c0       	rjmp	.+28     	; 0x21e <check_keyboard+0xce>
		row=row/2;
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	9c 81       	ldd	r25, Y+4	; 0x04
 206:	99 23       	and	r25, r25
 208:	0c f4       	brge	.+2      	; 0x20c <check_keyboard+0xbc>
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	95 95       	asr	r25
 20e:	87 95       	ror	r24
 210:	9c 83       	std	Y+4, r25	; 0x04
 212:	8b 83       	std	Y+3, r24	; 0x03
		row_counter++;
 214:	89 85       	ldd	r24, Y+9	; 0x09
 216:	9a 85       	ldd	r25, Y+10	; 0x0a
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	9a 87       	std	Y+10, r25	; 0x0a
 21c:	89 87       	std	Y+9, r24	; 0x09
	KEYBOARD_PORT = 0x0F;
	for(int i=0;i<20;i++);
	column = KEYBOARD_PIN;
	
	int row_counter=0;
	while((row % 2) == 1 && row_counter<4) {
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	9c 81       	ldd	r25, Y+4	; 0x04
 222:	22 e0       	ldi	r18, 0x02	; 2
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	b9 01       	movw	r22, r18
 228:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	91 05       	cpc	r25, r1
 230:	29 f4       	brne	.+10     	; 0x23c <check_keyboard+0xec>
 232:	89 85       	ldd	r24, Y+9	; 0x09
 234:	9a 85       	ldd	r25, Y+10	; 0x0a
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	91 05       	cpc	r25, r1
 23a:	1c f3       	brlt	.-58     	; 0x202 <check_keyboard+0xb2>
		row=row/2;
		row_counter++;
	}

	int column_counter=0;
 23c:	1c 86       	std	Y+12, r1	; 0x0c
 23e:	1b 86       	std	Y+11, r1	; 0x0b
	while((column % 2) == 1 && column_counter<4) {
 240:	0e c0       	rjmp	.+28     	; 0x25e <check_keyboard+0x10e>
		column=column/2;
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	9a 81       	ldd	r25, Y+2	; 0x02
 246:	99 23       	and	r25, r25
 248:	0c f4       	brge	.+2      	; 0x24c <check_keyboard+0xfc>
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	95 95       	asr	r25
 24e:	87 95       	ror	r24
 250:	9a 83       	std	Y+2, r25	; 0x02
 252:	89 83       	std	Y+1, r24	; 0x01
		column_counter++;
 254:	8b 85       	ldd	r24, Y+11	; 0x0b
 256:	9c 85       	ldd	r25, Y+12	; 0x0c
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	9c 87       	std	Y+12, r25	; 0x0c
 25c:	8b 87       	std	Y+11, r24	; 0x0b
		row=row/2;
		row_counter++;
	}

	int column_counter=0;
	while((column % 2) == 1 && column_counter<4) {
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	9a 81       	ldd	r25, Y+2	; 0x02
 262:	22 e0       	ldi	r18, 0x02	; 2
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	b9 01       	movw	r22, r18
 268:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	91 05       	cpc	r25, r1
 270:	29 f4       	brne	.+10     	; 0x27c <check_keyboard+0x12c>
 272:	8b 85       	ldd	r24, Y+11	; 0x0b
 274:	9c 85       	ldd	r25, Y+12	; 0x0c
 276:	84 30       	cpi	r24, 0x04	; 4
 278:	91 05       	cpc	r25, r1
 27a:	1c f3       	brlt	.-58     	; 0x242 <check_keyboard+0xf2>
		column_counter++;
	}
	
	int temp_key_number;
	
	if(row_counter==4 || column_counter==4) temp_key_number=0;
 27c:	89 85       	ldd	r24, Y+9	; 0x09
 27e:	9a 85       	ldd	r25, Y+10	; 0x0a
 280:	84 30       	cpi	r24, 0x04	; 4
 282:	91 05       	cpc	r25, r1
 284:	29 f0       	breq	.+10     	; 0x290 <check_keyboard+0x140>
 286:	8b 85       	ldd	r24, Y+11	; 0x0b
 288:	9c 85       	ldd	r25, Y+12	; 0x0c
 28a:	84 30       	cpi	r24, 0x04	; 4
 28c:	91 05       	cpc	r25, r1
 28e:	19 f4       	brne	.+6      	; 0x296 <check_keyboard+0x146>
 290:	1e 86       	std	Y+14, r1	; 0x0e
 292:	1d 86       	std	Y+13, r1	; 0x0d
 294:	0e c0       	rjmp	.+28     	; 0x2b2 <check_keyboard+0x162>
	else temp_key_number = 4*row_counter + column_counter + 1;
 296:	89 85       	ldd	r24, Y+9	; 0x09
 298:	9a 85       	ldd	r25, Y+10	; 0x0a
 29a:	9c 01       	movw	r18, r24
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	22 0f       	add	r18, r18
 2a2:	33 1f       	adc	r19, r19
 2a4:	8b 85       	ldd	r24, Y+11	; 0x0b
 2a6:	9c 85       	ldd	r25, Y+12	; 0x0c
 2a8:	82 0f       	add	r24, r18
 2aa:	93 1f       	adc	r25, r19
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	9e 87       	std	Y+14, r25	; 0x0e
 2b0:	8d 87       	std	Y+13, r24	; 0x0d
	
	if(key_number!=temp_key_number) {
 2b2:	20 91 73 00 	lds	r18, 0x0073
 2b6:	30 91 74 00 	lds	r19, 0x0074
 2ba:	8d 85       	ldd	r24, Y+13	; 0x0d
 2bc:	9e 85       	ldd	r25, Y+14	; 0x0e
 2be:	28 17       	cp	r18, r24
 2c0:	39 07       	cpc	r19, r25
 2c2:	61 f0       	breq	.+24     	; 0x2dc <check_keyboard+0x18c>
		key_number = temp_key_number;
 2c4:	8d 85       	ldd	r24, Y+13	; 0x0d
 2c6:	9e 85       	ldd	r25, Y+14	; 0x0e
 2c8:	90 93 74 00 	sts	0x0074, r25
 2cc:	80 93 73 00 	sts	0x0073, r24
		key_ready = 1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	90 93 76 00 	sts	0x0076, r25
 2d8:	80 93 75 00 	sts	0x0075, r24
	}
	
}
 2dc:	2e 96       	adiw	r28, 0x0e	; 14
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <draw_digit>:


void draw_digit() {
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <draw_digit+0x6>
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
	if(key_ready==1) {
 2f8:	80 91 75 00 	lds	r24, 0x0075
 2fc:	90 91 76 00 	lds	r25, 0x0076
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	91 05       	cpc	r25, r1
 304:	29 f5       	brne	.+74     	; 0x350 <draw_digit+0x62>
		key_ready=0;
 306:	10 92 76 00 	sts	0x0076, r1
 30a:	10 92 75 00 	sts	0x0075, r1
		int current_key = key_number;
 30e:	80 91 73 00 	lds	r24, 0x0073
 312:	90 91 74 00 	lds	r25, 0x0074
 316:	9a 83       	std	Y+2, r25	; 0x02
 318:	89 83       	std	Y+1, r24	; 0x01
		display_digit[3] = current_key % 10;
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	9a 81       	ldd	r25, Y+2	; 0x02
 31e:	2a e0       	ldi	r18, 0x0A	; 10
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	b9 01       	movw	r22, r18
 324:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 328:	90 93 72 00 	sts	0x0072, r25
 32c:	80 93 71 00 	sts	0x0071, r24
		current_key = current_key / 10;
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	9a 81       	ldd	r25, Y+2	; 0x02
 334:	2a e0       	ldi	r18, 0x0A	; 10
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	b9 01       	movw	r22, r18
 33a:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 33e:	9b 01       	movw	r18, r22
 340:	3a 83       	std	Y+2, r19	; 0x02
 342:	29 83       	std	Y+1, r18	; 0x01
		display_digit[2] = current_key;		
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	9a 81       	ldd	r25, Y+2	; 0x02
 348:	90 93 70 00 	sts	0x0070, r25
 34c:	80 93 6f 00 	sts	0x006F, r24
	}
}
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <multiplexer>:

void multiplexer() {
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	0f 92       	push	r0
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp_display; // this will be displayed
	temp_display = DIGITS[display_digit[multiplexer_memory]]; // from DIGITS learn how to show digit assigned to the current display
 364:	80 91 7c 00 	lds	r24, 0x007C
 368:	90 91 7d 00 	lds	r25, 0x007D
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	85 59       	subi	r24, 0x95	; 149
 372:	9f 4f       	sbci	r25, 0xFF	; 255
 374:	fc 01       	movw	r30, r24
 376:	80 81       	ld	r24, Z
 378:	91 81       	ldd	r25, Z+1	; 0x01
 37a:	80 5a       	subi	r24, 0xA0	; 160
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	fc 01       	movw	r30, r24
 380:	80 81       	ld	r24, Z
 382:	89 83       	std	Y+1, r24	; 0x01
	if(dot==1 && multiplexer_memory==2) {
 384:	80 91 7a 00 	lds	r24, 0x007A
 388:	90 91 7b 00 	lds	r25, 0x007B
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	91 05       	cpc	r25, r1
 390:	51 f4       	brne	.+20     	; 0x3a6 <multiplexer+0x4c>
 392:	80 91 7c 00 	lds	r24, 0x007C
 396:	90 91 7d 00 	lds	r25, 0x007D
 39a:	82 30       	cpi	r24, 0x02	; 2
 39c:	91 05       	cpc	r25, r1
 39e:	19 f4       	brne	.+6      	; 0x3a6 <multiplexer+0x4c>
		// add dot on third display
		temp_display &= ~(1<<0);
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	8e 7f       	andi	r24, 0xFE	; 254
 3a4:	89 83       	std	Y+1, r24	; 0x01
	}
	DISPLAY_STATE = DISPLAY_OFF;
 3a6:	8b e3       	ldi	r24, 0x3B	; 59
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	2f ef       	ldi	r18, 0xFF	; 255
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18
	DISPLAY_POWER_CONTROL = ~(1<<multiplexer_memory); // power-on display number multiplexer_memory
 3b0:	88 e3       	ldi	r24, 0x38	; 56
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	40 91 7c 00 	lds	r20, 0x007C
 3b8:	50 91 7d 00 	lds	r21, 0x007D
 3bc:	21 e0       	ldi	r18, 0x01	; 1
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	04 2e       	mov	r0, r20
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <multiplexer+0x6e>
 3c4:	22 0f       	add	r18, r18
 3c6:	33 1f       	adc	r19, r19
 3c8:	0a 94       	dec	r0
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <multiplexer+0x6a>
 3cc:	20 95       	com	r18
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
	DISPLAY_STATE = temp_display;
 3d2:	8b e3       	ldi	r24, 0x3B	; 59
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	29 81       	ldd	r18, Y+1	; 0x01
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
	multiplexer_memory++;
 3dc:	80 91 7c 00 	lds	r24, 0x007C
 3e0:	90 91 7d 00 	lds	r25, 0x007D
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	90 93 7d 00 	sts	0x007D, r25
 3ea:	80 93 7c 00 	sts	0x007C, r24
	multiplexer_memory = (multiplexer_memory) % 4; // increment display number (0..3)
 3ee:	80 91 7c 00 	lds	r24, 0x007C
 3f2:	90 91 7d 00 	lds	r25, 0x007D
 3f6:	24 e0       	ldi	r18, 0x04	; 4
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	b9 01       	movw	r22, r18
 3fc:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 400:	90 93 7d 00 	sts	0x007D, r25
 404:	80 93 7c 00 	sts	0x007C, r24
}
 408:	0f 90       	pop	r0
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <setupTimer>:

void setupTimer(){
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= (1<<WGM01) | (0<<WGM00); // set clock type as CTC
 418:	83 e5       	ldi	r24, 0x53	; 83
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	23 e5       	ldi	r18, 0x53	; 83
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	f9 01       	movw	r30, r18
 422:	20 81       	ld	r18, Z
 424:	28 60       	ori	r18, 0x08	; 8
 426:	fc 01       	movw	r30, r24
 428:	20 83       	st	Z, r18
	OCR0 = 250; // set Output Compare Register - together with prescaler this will give us
 42a:	8c e5       	ldi	r24, 0x5C	; 92
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	2a ef       	ldi	r18, 0xFA	; 250
 430:	fc 01       	movw	r30, r24
 432:	20 83       	st	Z, r18
	// interrupt every 1ms
	sei(); // turn interrupts on
 434:	78 94       	sei
	TIMSK |= (1<<OCIE0); // set interrupts co compare
 436:	89 e5       	ldi	r24, 0x59	; 89
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	29 e5       	ldi	r18, 0x59	; 89
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	f9 01       	movw	r30, r18
 440:	20 81       	ld	r18, Z
 442:	22 60       	ori	r18, 0x02	; 2
 444:	fc 01       	movw	r30, r24
 446:	20 83       	st	Z, r18
	TCCR0 |= (1<<CS00) | (1<<CS01 ); // set clock prescaler at 64*250 = 16,000; 16MHz * 16,000 = 1KHZ;
 448:	83 e5       	ldi	r24, 0x53	; 83
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	23 e5       	ldi	r18, 0x53	; 83
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	f9 01       	movw	r30, r18
 452:	20 81       	ld	r18, Z
 454:	23 60       	ori	r18, 0x03	; 3
 456:	fc 01       	movw	r30, r24
 458:	20 83       	st	Z, r18
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <time_inc>:

void time_inc()
{
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	00 d0       	rcall	.+0      	; 0x466 <time_inc+0x6>
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
	// increment time_counter and update display_digits
	int temp_time_counter = time_counter;
 46a:	80 91 78 00 	lds	r24, 0x0078
 46e:	90 91 79 00 	lds	r25, 0x0079
 472:	9a 83       	std	Y+2, r25	; 0x02
 474:	89 83       	std	Y+1, r24	; 0x01
	if(temp_time_counter>=10000) {
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	9a 81       	ldd	r25, Y+2	; 0x02
 47a:	27 e2       	ldi	r18, 0x27	; 39
 47c:	80 31       	cpi	r24, 0x10	; 16
 47e:	92 07       	cpc	r25, r18
 480:	0c f4       	brge	.+2      	; 0x484 <time_inc+0x24>
 482:	59 c0       	rjmp	.+178    	; 0x536 <time_inc+0xd6>
		// display time in seconds without dot
		dot = 0;
 484:	10 92 7b 00 	sts	0x007B, r1
 488:	10 92 7a 00 	sts	0x007A, r1
		temp_time_counter=temp_time_counter/10;
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	9a 81       	ldd	r25, Y+2	; 0x02
 490:	2a e0       	ldi	r18, 0x0A	; 10
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	b9 01       	movw	r22, r18
 496:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 49a:	9b 01       	movw	r18, r22
 49c:	3a 83       	std	Y+2, r19	; 0x02
 49e:	29 83       	std	Y+1, r18	; 0x01
		display_digit[3] = temp_time_counter % 10;
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	9a 81       	ldd	r25, Y+2	; 0x02
 4a4:	2a e0       	ldi	r18, 0x0A	; 10
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	b9 01       	movw	r22, r18
 4aa:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 4ae:	90 93 72 00 	sts	0x0072, r25
 4b2:	80 93 71 00 	sts	0x0071, r24
		temp_time_counter=temp_time_counter/10;
 4b6:	89 81       	ldd	r24, Y+1	; 0x01
 4b8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ba:	2a e0       	ldi	r18, 0x0A	; 10
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	b9 01       	movw	r22, r18
 4c0:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 4c4:	9b 01       	movw	r18, r22
 4c6:	3a 83       	std	Y+2, r19	; 0x02
 4c8:	29 83       	std	Y+1, r18	; 0x01
		display_digit[2]= temp_time_counter % 10;
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	9a 81       	ldd	r25, Y+2	; 0x02
 4ce:	2a e0       	ldi	r18, 0x0A	; 10
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 4d8:	90 93 70 00 	sts	0x0070, r25
 4dc:	80 93 6f 00 	sts	0x006F, r24
		temp_time_counter=temp_time_counter/10;
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	9a 81       	ldd	r25, Y+2	; 0x02
 4e4:	2a e0       	ldi	r18, 0x0A	; 10
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	b9 01       	movw	r22, r18
 4ea:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 4ee:	9b 01       	movw	r18, r22
 4f0:	3a 83       	std	Y+2, r19	; 0x02
 4f2:	29 83       	std	Y+1, r18	; 0x01
		display_digit[1] = temp_time_counter % 10;
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	9a 81       	ldd	r25, Y+2	; 0x02
 4f8:	2a e0       	ldi	r18, 0x0A	; 10
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	b9 01       	movw	r22, r18
 4fe:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 502:	90 93 6e 00 	sts	0x006E, r25
 506:	80 93 6d 00 	sts	0x006D, r24
		temp_time_counter=temp_time_counter/10;
 50a:	89 81       	ldd	r24, Y+1	; 0x01
 50c:	9a 81       	ldd	r25, Y+2	; 0x02
 50e:	2a e0       	ldi	r18, 0x0A	; 10
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	b9 01       	movw	r22, r18
 514:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 518:	9b 01       	movw	r18, r22
 51a:	3a 83       	std	Y+2, r19	; 0x02
 51c:	29 83       	std	Y+1, r18	; 0x01
		display_digit[0] = temp_time_counter % 10;
 51e:	89 81       	ldd	r24, Y+1	; 0x01
 520:	9a 81       	ldd	r25, Y+2	; 0x02
 522:	2a e0       	ldi	r18, 0x0A	; 10
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	b9 01       	movw	r22, r18
 528:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 52c:	90 93 6c 00 	sts	0x006C, r25
 530:	80 93 6b 00 	sts	0x006B, r24
 534:	68 c0       	rjmp	.+208    	; 0x606 <time_inc+0x1a6>
	}
	else {
		// display time in seconds/10 with dot
		dot = 1;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	90 93 7b 00 	sts	0x007B, r25
 53e:	80 93 7a 00 	sts	0x007A, r24
		display_digit[3] = temp_time_counter % 10;
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	9a 81       	ldd	r25, Y+2	; 0x02
 546:	2a e0       	ldi	r18, 0x0A	; 10
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	b9 01       	movw	r22, r18
 54c:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 550:	90 93 72 00 	sts	0x0072, r25
 554:	80 93 71 00 	sts	0x0071, r24
		temp_time_counter=temp_time_counter/10;
 558:	89 81       	ldd	r24, Y+1	; 0x01
 55a:	9a 81       	ldd	r25, Y+2	; 0x02
 55c:	2a e0       	ldi	r18, 0x0A	; 10
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	b9 01       	movw	r22, r18
 562:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 566:	9b 01       	movw	r18, r22
 568:	3a 83       	std	Y+2, r19	; 0x02
 56a:	29 83       	std	Y+1, r18	; 0x01
		display_digit[2]= temp_time_counter % 10;
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	9a 81       	ldd	r25, Y+2	; 0x02
 570:	2a e0       	ldi	r18, 0x0A	; 10
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	b9 01       	movw	r22, r18
 576:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 57a:	90 93 70 00 	sts	0x0070, r25
 57e:	80 93 6f 00 	sts	0x006F, r24
		temp_time_counter=temp_time_counter/10;
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	9a 81       	ldd	r25, Y+2	; 0x02
 586:	2a e0       	ldi	r18, 0x0A	; 10
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	b9 01       	movw	r22, r18
 58c:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 590:	9b 01       	movw	r18, r22
 592:	3a 83       	std	Y+2, r19	; 0x02
 594:	29 83       	std	Y+1, r18	; 0x01
		display_digit[1] = temp_time_counter % 10;
 596:	89 81       	ldd	r24, Y+1	; 0x01
 598:	9a 81       	ldd	r25, Y+2	; 0x02
 59a:	2a e0       	ldi	r18, 0x0A	; 10
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	b9 01       	movw	r22, r18
 5a0:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 5a4:	90 93 6e 00 	sts	0x006E, r25
 5a8:	80 93 6d 00 	sts	0x006D, r24
		temp_time_counter=temp_time_counter/10;
 5ac:	89 81       	ldd	r24, Y+1	; 0x01
 5ae:	9a 81       	ldd	r25, Y+2	; 0x02
 5b0:	2a e0       	ldi	r18, 0x0A	; 10
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	b9 01       	movw	r22, r18
 5b6:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 5ba:	9b 01       	movw	r18, r22
 5bc:	3a 83       	std	Y+2, r19	; 0x02
 5be:	29 83       	std	Y+1, r18	; 0x01
		display_digit[0] = temp_time_counter % 10;
 5c0:	89 81       	ldd	r24, Y+1	; 0x01
 5c2:	9a 81       	ldd	r25, Y+2	; 0x02
 5c4:	2a e0       	ldi	r18, 0x0A	; 10
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	b9 01       	movw	r22, r18
 5ca:	0e 94 ad 04 	call	0x95a	; 0x95a <__divmodhi4>
 5ce:	90 93 6c 00 	sts	0x006C, r25
 5d2:	80 93 6b 00 	sts	0x006B, r24
		
		if(!TIME_SHOW_LEADING_ZEROS && display_digit[0]==0) {
 5d6:	80 91 6b 00 	lds	r24, 0x006B
 5da:	90 91 6c 00 	lds	r25, 0x006C
 5de:	00 97       	sbiw	r24, 0x00	; 0
 5e0:	91 f4       	brne	.+36     	; 0x606 <time_inc+0x1a6>
			// turn off segments displaying leading zeros
			display_digit[0] = BLANK_DIGIT;
 5e2:	8a e0       	ldi	r24, 0x0A	; 10
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	90 93 6c 00 	sts	0x006C, r25
 5ea:	80 93 6b 00 	sts	0x006B, r24
			if(display_digit[1]==0) display_digit[1] = BLANK_DIGIT;
 5ee:	80 91 6d 00 	lds	r24, 0x006D
 5f2:	90 91 6e 00 	lds	r25, 0x006E
 5f6:	00 97       	sbiw	r24, 0x00	; 0
 5f8:	31 f4       	brne	.+12     	; 0x606 <time_inc+0x1a6>
 5fa:	8a e0       	ldi	r24, 0x0A	; 10
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	90 93 6e 00 	sts	0x006E, r25
 602:	80 93 6d 00 	sts	0x006D, r24
		}
	}
	
	time_counter++;
 606:	80 91 78 00 	lds	r24, 0x0078
 60a:	90 91 79 00 	lds	r25, 0x0079
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	90 93 79 00 	sts	0x0079, r25
 614:	80 93 78 00 	sts	0x0078, r24
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <schedule>:

int tasksToDo = 0;

static task tasks[MAX_NUMBER_OF_TASKS];

void schedule(){
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	00 d0       	rcall	.+0      	; 0x628 <schedule+0x6>
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
	
	for (int i=0; i<MAX_NUMBER_OF_TASKS; i++){					// checking and incrementing loop
 62c:	1a 82       	std	Y+2, r1	; 0x02
 62e:	19 82       	std	Y+1, r1	; 0x01
 630:	58 c0       	rjmp	.+176    	; 0x6e2 <schedule+0xc0>
		tasks[i].counter++;											// time passes, increase every task's counter
 632:	29 81       	ldd	r18, Y+1	; 0x01
 634:	3a 81       	ldd	r19, Y+2	; 0x02
 636:	c9 01       	movw	r24, r18
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	82 1b       	sub	r24, r18
 646:	93 0b       	sbc	r25, r19
 648:	8b 57       	subi	r24, 0x7B	; 123
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	fc 01       	movw	r30, r24
 64e:	80 81       	ld	r24, Z
 650:	91 81       	ldd	r25, Z+1	; 0x01
 652:	ac 01       	movw	r20, r24
 654:	4f 5f       	subi	r20, 0xFF	; 255
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	29 81       	ldd	r18, Y+1	; 0x01
 65a:	3a 81       	ldd	r19, Y+2	; 0x02
 65c:	c9 01       	movw	r24, r18
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	82 1b       	sub	r24, r18
 66c:	93 0b       	sbc	r25, r19
 66e:	8b 57       	subi	r24, 0x7B	; 123
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	fc 01       	movw	r30, r24
 674:	51 83       	std	Z+1, r21	; 0x01
 676:	40 83       	st	Z, r20
		if (tasks[i].counter % tasks[i].interval == 0) tasksToDo++;	// check if one of the functions need to be executed now
 678:	29 81       	ldd	r18, Y+1	; 0x01
 67a:	3a 81       	ldd	r19, Y+2	; 0x02
 67c:	c9 01       	movw	r24, r18
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	82 1b       	sub	r24, r18
 68c:	93 0b       	sbc	r25, r19
 68e:	8b 57       	subi	r24, 0x7B	; 123
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	fc 01       	movw	r30, r24
 694:	40 81       	ld	r20, Z
 696:	51 81       	ldd	r21, Z+1	; 0x01
 698:	29 81       	ldd	r18, Y+1	; 0x01
 69a:	3a 81       	ldd	r19, Y+2	; 0x02
 69c:	c9 01       	movw	r24, r18
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	82 1b       	sub	r24, r18
 6ac:	93 0b       	sbc	r25, r19
 6ae:	8c 57       	subi	r24, 0x7C	; 124
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	fc 01       	movw	r30, r24
 6b4:	80 81       	ld	r24, Z
 6b6:	28 2f       	mov	r18, r24
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	ca 01       	movw	r24, r20
 6bc:	b9 01       	movw	r22, r18
 6be:	0e 94 99 04 	call	0x932	; 0x932 <__udivmodhi4>
 6c2:	00 97       	sbiw	r24, 0x00	; 0
 6c4:	49 f4       	brne	.+18     	; 0x6d8 <schedule+0xb6>
 6c6:	80 91 7e 00 	lds	r24, 0x007E
 6ca:	90 91 7f 00 	lds	r25, 0x007F
 6ce:	01 96       	adiw	r24, 0x01	; 1
 6d0:	90 93 7f 00 	sts	0x007F, r25
 6d4:	80 93 7e 00 	sts	0x007E, r24

static task tasks[MAX_NUMBER_OF_TASKS];

void schedule(){
	
	for (int i=0; i<MAX_NUMBER_OF_TASKS; i++){					// checking and incrementing loop
 6d8:	89 81       	ldd	r24, Y+1	; 0x01
 6da:	9a 81       	ldd	r25, Y+2	; 0x02
 6dc:	01 96       	adiw	r24, 0x01	; 1
 6de:	9a 83       	std	Y+2, r25	; 0x02
 6e0:	89 83       	std	Y+1, r24	; 0x01
 6e2:	89 81       	ldd	r24, Y+1	; 0x01
 6e4:	9a 81       	ldd	r25, Y+2	; 0x02
 6e6:	88 30       	cpi	r24, 0x08	; 8
 6e8:	91 05       	cpc	r25, r1
 6ea:	0c f4       	brge	.+2      	; 0x6ee <schedule+0xcc>
 6ec:	a2 cf       	rjmp	.-188    	; 0x632 <schedule+0x10>
		tasks[i].counter++;											// time passes, increase every task's counter
		if (tasks[i].counter % tasks[i].interval == 0) tasksToDo++;	// check if one of the functions need to be executed now
	}	
	
}
 6ee:	0f 90       	pop	r0
 6f0:	0f 90       	pop	r0
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	08 95       	ret

000006f8 <addTask>:

void addTask(uint8_t numberOfTask, uint8_t interval, void (*foo)(void*), void* args){
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	00 d0       	rcall	.+0      	; 0x6fe <addTask+0x6>
 6fe:	00 d0       	rcall	.+0      	; 0x700 <addTask+0x8>
 700:	00 d0       	rcall	.+0      	; 0x702 <addTask+0xa>
 702:	cd b7       	in	r28, 0x3d	; 61
 704:	de b7       	in	r29, 0x3e	; 62
 706:	89 83       	std	Y+1, r24	; 0x01
 708:	6a 83       	std	Y+2, r22	; 0x02
 70a:	5c 83       	std	Y+4, r21	; 0x04
 70c:	4b 83       	std	Y+3, r20	; 0x03
 70e:	3e 83       	std	Y+6, r19	; 0x06
 710:	2d 83       	std	Y+5, r18	; 0x05
	
	tasks[numberOfTask].foo = foo;
 712:	89 81       	ldd	r24, Y+1	; 0x01
 714:	28 2f       	mov	r18, r24
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	c9 01       	movw	r24, r18
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	82 1b       	sub	r24, r18
 728:	93 0b       	sbc	r25, r19
 72a:	80 58       	subi	r24, 0x80	; 128
 72c:	9f 4f       	sbci	r25, 0xFF	; 255
 72e:	2b 81       	ldd	r18, Y+3	; 0x03
 730:	3c 81       	ldd	r19, Y+4	; 0x04
 732:	fc 01       	movw	r30, r24
 734:	31 83       	std	Z+1, r19	; 0x01
 736:	20 83       	st	Z, r18
	tasks[numberOfTask].args = args;
 738:	89 81       	ldd	r24, Y+1	; 0x01
 73a:	28 2f       	mov	r18, r24
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	c9 01       	movw	r24, r18
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	82 1b       	sub	r24, r18
 74e:	93 0b       	sbc	r25, r19
 750:	8e 57       	subi	r24, 0x7E	; 126
 752:	9f 4f       	sbci	r25, 0xFF	; 255
 754:	2d 81       	ldd	r18, Y+5	; 0x05
 756:	3e 81       	ldd	r19, Y+6	; 0x06
 758:	fc 01       	movw	r30, r24
 75a:	31 83       	std	Z+1, r19	; 0x01
 75c:	20 83       	st	Z, r18
	tasks[numberOfTask].interval = interval;
 75e:	89 81       	ldd	r24, Y+1	; 0x01
 760:	28 2f       	mov	r18, r24
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	c9 01       	movw	r24, r18
 766:	88 0f       	add	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	88 0f       	add	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	88 0f       	add	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	82 1b       	sub	r24, r18
 774:	93 0b       	sbc	r25, r19
 776:	8c 57       	subi	r24, 0x7C	; 124
 778:	9f 4f       	sbci	r25, 0xFF	; 255
 77a:	2a 81       	ldd	r18, Y+2	; 0x02
 77c:	fc 01       	movw	r30, r24
 77e:	20 83       	st	Z, r18
	tasks[numberOfTask].counter = 0;
 780:	89 81       	ldd	r24, Y+1	; 0x01
 782:	28 2f       	mov	r18, r24
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	c9 01       	movw	r24, r18
 788:	88 0f       	add	r24, r24
 78a:	99 1f       	adc	r25, r25
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	82 1b       	sub	r24, r18
 796:	93 0b       	sbc	r25, r19
 798:	8b 57       	subi	r24, 0x7B	; 123
 79a:	9f 4f       	sbci	r25, 0xFF	; 255
 79c:	fc 01       	movw	r30, r24
 79e:	11 82       	std	Z+1, r1	; 0x01
 7a0:	10 82       	st	Z, r1
	
}
 7a2:	26 96       	adiw	r28, 0x06	; 6
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	f8 94       	cli
 7a8:	de bf       	out	0x3e, r29	; 62
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	cd bf       	out	0x3d, r28	; 61
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	08 95       	ret

000007b4 <execute>:

void execute(){
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	00 d0       	rcall	.+0      	; 0x7ba <execute+0x6>
 7ba:	0f 92       	push	r0
 7bc:	cd b7       	in	r28, 0x3d	; 61
 7be:	de b7       	in	r29, 0x3e	; 62
		
	while (1){
	
		
		while ( tasksToDo == 0 ){}	  // empty loop for idling (when ther;'s no task to do) 
 7c0:	00 00       	nop
 7c2:	80 91 7e 00 	lds	r24, 0x007E
 7c6:	90 91 7f 00 	lds	r25, 0x007F
 7ca:	00 97       	sbiw	r24, 0x00	; 0
 7cc:	d1 f3       	breq	.-12     	; 0x7c2 <execute+0xe>
		
		int8_t currentTaskToDo = -1;  // for keeping watch on which task to execute after the checking loop
 7ce:	8f ef       	ldi	r24, 0xFF	; 255
 7d0:	89 83       	std	Y+1, r24	; 0x01
		cli();						  // turn interrupts off, for synchronicity's sake 
 7d2:	f8 94       	cli
		
		for (int i=0; i<MAX_NUMBER_OF_TASKS; i++)								// checking loop
 7d4:	1b 82       	std	Y+3, r1	; 0x03
 7d6:	1a 82       	std	Y+2, r1	; 0x02
 7d8:	7b c0       	rjmp	.+246    	; 0x8d0 <__stack+0x71>
		{									
			if ( tasks[i].interval > 0 && tasks[i].counter >= tasks[i].interval )	// check if there's a task to execute
 7da:	2a 81       	ldd	r18, Y+2	; 0x02
 7dc:	3b 81       	ldd	r19, Y+3	; 0x03
 7de:	c9 01       	movw	r24, r18
 7e0:	88 0f       	add	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	82 1b       	sub	r24, r18
 7ee:	93 0b       	sbc	r25, r19
 7f0:	8c 57       	subi	r24, 0x7C	; 124
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	fc 01       	movw	r30, r24
 7f6:	80 81       	ld	r24, Z
 7f8:	88 23       	and	r24, r24
 7fa:	09 f4       	brne	.+2      	; 0x7fe <execute+0x4a>
 7fc:	64 c0       	rjmp	.+200    	; 0x8c6 <__stack+0x67>
 7fe:	2a 81       	ldd	r18, Y+2	; 0x02
 800:	3b 81       	ldd	r19, Y+3	; 0x03
 802:	c9 01       	movw	r24, r18
 804:	88 0f       	add	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	88 0f       	add	r24, r24
 80a:	99 1f       	adc	r25, r25
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	82 1b       	sub	r24, r18
 812:	93 0b       	sbc	r25, r19
 814:	8b 57       	subi	r24, 0x7B	; 123
 816:	9f 4f       	sbci	r25, 0xFF	; 255
 818:	fc 01       	movw	r30, r24
 81a:	40 81       	ld	r20, Z
 81c:	51 81       	ldd	r21, Z+1	; 0x01
 81e:	2a 81       	ldd	r18, Y+2	; 0x02
 820:	3b 81       	ldd	r19, Y+3	; 0x03
 822:	c9 01       	movw	r24, r18
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	82 1b       	sub	r24, r18
 832:	93 0b       	sbc	r25, r19
 834:	8c 57       	subi	r24, 0x7C	; 124
 836:	9f 4f       	sbci	r25, 0xFF	; 255
 838:	fc 01       	movw	r30, r24
 83a:	80 81       	ld	r24, Z
 83c:	88 2f       	mov	r24, r24
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	48 17       	cp	r20, r24
 842:	59 07       	cpc	r21, r25
 844:	08 f4       	brcc	.+2      	; 0x848 <execute+0x94>
 846:	3f c0       	rjmp	.+126    	; 0x8c6 <__stack+0x67>
			{																		// if there is...
				tasks[i].counter -= tasks[i].interval;									// decrease its counter by its interval (1 execution) 
 848:	2a 81       	ldd	r18, Y+2	; 0x02
 84a:	3b 81       	ldd	r19, Y+3	; 0x03
 84c:	c9 01       	movw	r24, r18
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	82 1b       	sub	r24, r18
 85c:	93 0b       	sbc	r25, r19
 85e:	8b 57       	subi	r24, 0x7B	; 123
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	fc 01       	movw	r30, r24
 864:	40 81       	ld	r20, Z
 866:	51 81       	ldd	r21, Z+1	; 0x01
 868:	2a 81       	ldd	r18, Y+2	; 0x02
 86a:	3b 81       	ldd	r19, Y+3	; 0x03
 86c:	c9 01       	movw	r24, r18
 86e:	88 0f       	add	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	88 0f       	add	r24, r24
 874:	99 1f       	adc	r25, r25
 876:	88 0f       	add	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	82 1b       	sub	r24, r18
 87c:	93 0b       	sbc	r25, r19
 87e:	8c 57       	subi	r24, 0x7C	; 124
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	fc 01       	movw	r30, r24
 884:	80 81       	ld	r24, Z
 886:	88 2f       	mov	r24, r24
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	48 1b       	sub	r20, r24
 88c:	59 0b       	sbc	r21, r25
 88e:	2a 81       	ldd	r18, Y+2	; 0x02
 890:	3b 81       	ldd	r19, Y+3	; 0x03
 892:	c9 01       	movw	r24, r18
 894:	88 0f       	add	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	88 0f       	add	r24, r24
 89a:	99 1f       	adc	r25, r25
 89c:	88 0f       	add	r24, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	82 1b       	sub	r24, r18
 8a2:	93 0b       	sbc	r25, r19
 8a4:	8b 57       	subi	r24, 0x7B	; 123
 8a6:	9f 4f       	sbci	r25, 0xFF	; 255
 8a8:	fc 01       	movw	r30, r24
 8aa:	51 83       	std	Z+1, r21	; 0x01
 8ac:	40 83       	st	Z, r20
				currentTaskToDo = i;														// remember which task it was
 8ae:	8a 81       	ldd	r24, Y+2	; 0x02
 8b0:	89 83       	std	Y+1, r24	; 0x01
				tasksToDo--;															// decrease number of task that still need executing 
 8b2:	80 91 7e 00 	lds	r24, 0x007E
 8b6:	90 91 7f 00 	lds	r25, 0x007F
 8ba:	01 97       	sbiw	r24, 0x01	; 1
 8bc:	90 93 7f 00 	sts	0x007F, r25
 8c0:	80 93 7e 00 	sts	0x007E, r24
				break;																	// finally, leave the loop for imminent execution
 8c4:	0b c0       	rjmp	.+22     	; 0x8dc <__stack+0x7d>
		while ( tasksToDo == 0 ){}	  // empty loop for idling (when ther;'s no task to do) 
		
		int8_t currentTaskToDo = -1;  // for keeping watch on which task to execute after the checking loop
		cli();						  // turn interrupts off, for synchronicity's sake 
		
		for (int i=0; i<MAX_NUMBER_OF_TASKS; i++)								// checking loop
 8c6:	8a 81       	ldd	r24, Y+2	; 0x02
 8c8:	9b 81       	ldd	r25, Y+3	; 0x03
 8ca:	01 96       	adiw	r24, 0x01	; 1
 8cc:	9b 83       	std	Y+3, r25	; 0x03
 8ce:	8a 83       	std	Y+2, r24	; 0x02
 8d0:	8a 81       	ldd	r24, Y+2	; 0x02
 8d2:	9b 81       	ldd	r25, Y+3	; 0x03
 8d4:	88 30       	cpi	r24, 0x08	; 8
 8d6:	91 05       	cpc	r25, r1
 8d8:	0c f4       	brge	.+2      	; 0x8dc <__stack+0x7d>
 8da:	7f cf       	rjmp	.-258    	; 0x7da <execute+0x26>
				tasksToDo--;															// decrease number of task that still need executing 
				break;																	// finally, leave the loop for imminent execution
			}
		}
		
		sei();												// turn interrupts on again
 8dc:	78 94       	sei
		tasks[currentTaskToDo].foo(tasks[currentTaskToDo].args);	// execute the remembered task
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	28 2f       	mov	r18, r24
 8e2:	33 27       	eor	r19, r19
 8e4:	27 fd       	sbrc	r18, 7
 8e6:	30 95       	com	r19
 8e8:	c9 01       	movw	r24, r18
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	88 0f       	add	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	88 0f       	add	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	82 1b       	sub	r24, r18
 8f8:	93 0b       	sbc	r25, r19
 8fa:	80 58       	subi	r24, 0x80	; 128
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	fc 01       	movw	r30, r24
 900:	40 81       	ld	r20, Z
 902:	51 81       	ldd	r21, Z+1	; 0x01
 904:	89 81       	ldd	r24, Y+1	; 0x01
 906:	28 2f       	mov	r18, r24
 908:	33 27       	eor	r19, r19
 90a:	27 fd       	sbrc	r18, 7
 90c:	30 95       	com	r19
 90e:	c9 01       	movw	r24, r18
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	88 0f       	add	r24, r24
 916:	99 1f       	adc	r25, r25
 918:	88 0f       	add	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	82 1b       	sub	r24, r18
 91e:	93 0b       	sbc	r25, r19
 920:	8e 57       	subi	r24, 0x7E	; 126
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	fc 01       	movw	r30, r24
 926:	80 81       	ld	r24, Z
 928:	91 81       	ldd	r25, Z+1	; 0x01
 92a:	fa 01       	movw	r30, r20
 92c:	09 95       	icall
		
	}
 92e:	00 00       	nop
void execute(){
		
	while (1){
	
		
		while ( tasksToDo == 0 ){}	  // empty loop for idling (when ther;'s no task to do) 
 930:	47 cf       	rjmp	.-370    	; 0x7c0 <execute+0xc>

00000932 <__udivmodhi4>:
 932:	aa 1b       	sub	r26, r26
 934:	bb 1b       	sub	r27, r27
 936:	51 e1       	ldi	r21, 0x11	; 17
 938:	07 c0       	rjmp	.+14     	; 0x948 <__udivmodhi4_ep>

0000093a <__udivmodhi4_loop>:
 93a:	aa 1f       	adc	r26, r26
 93c:	bb 1f       	adc	r27, r27
 93e:	a6 17       	cp	r26, r22
 940:	b7 07       	cpc	r27, r23
 942:	10 f0       	brcs	.+4      	; 0x948 <__udivmodhi4_ep>
 944:	a6 1b       	sub	r26, r22
 946:	b7 0b       	sbc	r27, r23

00000948 <__udivmodhi4_ep>:
 948:	88 1f       	adc	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	5a 95       	dec	r21
 94e:	a9 f7       	brne	.-22     	; 0x93a <__udivmodhi4_loop>
 950:	80 95       	com	r24
 952:	90 95       	com	r25
 954:	bc 01       	movw	r22, r24
 956:	cd 01       	movw	r24, r26
 958:	08 95       	ret

0000095a <__divmodhi4>:
 95a:	97 fb       	bst	r25, 7
 95c:	09 2e       	mov	r0, r25
 95e:	07 26       	eor	r0, r23
 960:	0a d0       	rcall	.+20     	; 0x976 <__divmodhi4_neg1>
 962:	77 fd       	sbrc	r23, 7
 964:	04 d0       	rcall	.+8      	; 0x96e <__divmodhi4_neg2>
 966:	e5 df       	rcall	.-54     	; 0x932 <__udivmodhi4>
 968:	06 d0       	rcall	.+12     	; 0x976 <__divmodhi4_neg1>
 96a:	00 20       	and	r0, r0
 96c:	1a f4       	brpl	.+6      	; 0x974 <__divmodhi4_exit>

0000096e <__divmodhi4_neg2>:
 96e:	70 95       	com	r23
 970:	61 95       	neg	r22
 972:	7f 4f       	sbci	r23, 0xFF	; 255

00000974 <__divmodhi4_exit>:
 974:	08 95       	ret

00000976 <__divmodhi4_neg1>:
 976:	f6 f7       	brtc	.-4      	; 0x974 <__divmodhi4_exit>
 978:	90 95       	com	r25
 97a:	81 95       	neg	r24
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	08 95       	ret

00000980 <_exit>:
 980:	f8 94       	cli

00000982 <__stop_program>:
 982:	ff cf       	rjmp	.-2      	; 0x982 <__stop_program>
